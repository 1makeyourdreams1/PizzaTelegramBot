import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
import json
from time import sleep
import database

import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")
PAY_TOKEN = os.getenv("TOKEN_PAYMENTS")

bot = telebot.TeleBot(TOKEN)

data = """
{
  "menu": [
    {
      "name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "—Å–≤–µ–∂–∏–π –±–∞–∑–∏–ª–∏–∫"],
      "price": 300
    },
    {
      "name": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∫–æ–ª–±–∞—Å–∞"],
      "price": 350
    },
    {
      "name": "–ì–∞–≤–∞–π—Å–∫–∞—è",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–≤–µ—Ç—á–∏–Ω–∞", "–∞–Ω–∞–Ω–∞—Å—ã"],
      "price": 380
    },
    {
      "name": "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "—Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ (–ø–æ–º–∏–¥–æ—Ä—ã, –ø–µ—Ä—Ü—ã, –≥—Ä–∏–±—ã, –æ–ª–∏–≤–∫–∏)"],
      "price": 320
    },
    {
      "name": "BBQ –¶—ã–ø–ª–µ–Ω–æ–∫",
      "ingredients": ["BBQ —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–∫—É—Å–æ—á–∫–∏ —Ü—ã–ø–ª–µ–Ω–∫–∞", "–∫—Ä–∞—Å–Ω—ã–π –ª—É–∫"],
      "price": 370
    },
    {
      "name": "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "—Ñ–∞—Å–æ–ª—å", "–∫—É–∫—É—Ä—É–∑–∞", "–æ—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ü", "—Å–æ—É—Å —Å–∞–ª—å—Å–∞"],
      "price": 360
    },
    {
      "name": "–ß–µ—Ç—ã—Ä–µ –°—ã—Ä–∞",
      "ingredients": ["–±–µ–ª—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–∞—Ä–º–µ–∑–∞–Ω", "–≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞", "—Ñ–µ—Ç–∞"],
      "price": 390
    },
    {
      "name": "–ú—è—Å–Ω–∞—è",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–≤–µ—Ç—á–∏–Ω–∞", "–ø–µ–ø–ø–µ—Ä–æ–Ω–∏", "—Å–∞–ª—è–º–∏", "–±–µ–∫–æ–Ω"],
      "price": 400
    },
    {
      "name": "–ú–∞—Ä–∏–Ω–∞—Ä–∞",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "—á–µ—Å–Ω–æ–∫", "–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", "—Å–≤–µ–∂–∏–π –±–∞–∑–∏–ª–∏–∫"],
      "price": 330
    },
    {
      "name": "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
      "ingredients": ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–∫—Ä–µ–≤–µ—Ç–∫–∏", "–º–∏–¥–∏–∏", "–∫–∞–ª—å–º–∞—Ä—ã", "–æ—Å—å–º–∏–Ω–æ–≥–∏"],
      "price": 420
    }
  ]
}

"""
menu = json.loads(data)
db = database.Database()


def generate_menu():
    global menu
    text = "_–í–æ—Ç –Ω–∞—à–µ –º–µ–Ω—é:_\n"
    for i in range(1, len(menu["menu"]) + 1):
        text += str(i) + "  ***" + menu["menu"][i - 1]["name"] + "*** - " + \
                str(menu["menu"][i - 1]["price"]) + " —Ä—É–±." \
                + "\n" \
                + "*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*: " + \
                menu["menu"][i - 1]["ingredients"][0]
        for item in menu["menu"][i - 1]["ingredients"][1::]:
            text += ", " + item
        text += "\n\n"
    text += "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–∏—Ü—Ü—É –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüëá"
    return text


def generate_keyboard():
    markup = InlineKeyboardMarkup(row_width=5)
    buttons = []
    for i in range(1, 11):
        button = InlineKeyboardButton(str(i), callback_data=str(i))
        buttons.append(button)
    markup.add(*buttons)
    markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="basket"),
               InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back"))
    return markup


def add_to_basket(user_id, num):
    basket = db.get_basket(user_id)
    if not (num in basket):
        basket[num] = 1
    else:
        basket[num] += 1
    db.set_basket(user_id, str(basket))


def generate_basket(user_id):
    text = ""
    count = 1
    total_price = 0
    basket = db.get_basket(user_id)
    for key, value in basket.items():
        text += str(count) + "  " + menu['menu'][key]['name'] + ' - ' + str(value) + " —à—Ç. " + '_' + \
                str(menu['menu'][key]['price'] * value) + ' —Ä—É–±._\n'
        total_price += menu['menu'][key]['price'] * value
        count += 1
    text += '\n\n–ö –æ–ø–ª–∞—Ç–µ: _' + str(total_price) + " —Ä—É–±._"
    return text


def generate_receipt(user_id):
    text = "–ó–∞–∫–∞–∑:\n"
    count = 1
    basket = db.get_basket(user_id)
    for key, value in basket.items():
        text += str(count) + "  " + menu['menu'][key]['name'] + ' - ' + str(value) + " —à—Ç. " + '_' + \
                str(menu['menu'][key]['price'] * value) + ' —Ä—É–±._\n'
        count += 1
    text += "\n–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –ù–∞—à –∫—É—Ä—å–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!"
    return text



def review_handler(message):
    bot.delete_message(message.chat.id, db.get_last_message(message.chat.id))
    db.add_review(message.chat.id, message.text)
    bot.delete_message(message.chat.id, db.get_last_message(message.chat.id) + 1)
    last_message = bot.send_message(message.chat.id, "–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω").message_id
    sleep(2)
    bot.delete_message(message.chat.id, last_message)
    db.set_last_message(message.chat.id, 0)
    start_message_handler(message)


@bot.message_handler(commands=['start'])
def start_message_handler(message):
    if not db.user_exists(message.chat.id):
        db.add_user(message.chat.id)
        db.set_last_message(message.chat.id, 0)
        db.set_basket(message.chat.id, str({}))
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='order')
    button2 = InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='review')
    button3 = InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—Ä–∑–∏–Ω–µ', callback_data='basket')
    markup.add(button1, button2, button3)
    last_message = db.get_last_message(message.chat.id)
    if last_message != 0:
        bot.delete_message(message.chat.id, last_message)
    last_message = bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å "
                                                     f"–≤ Super Pizza ‚Äì –º–µ—Å—Ç–æ,"
                                                     f" –≥–¥–µ –≤–∫—É—Å"
                                                     f" –≤—Å—Ç—Ä–µ—á–∞–µ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ! üçïüéâ\n"
                                                     f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —É–≥–æ–ª–∫–µ –Ω–∞—Å—Ç–æ—è—â–µ–π "
                                                     f"–∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π"
                                                     f" –∫—É—Å–æ—á–µ–∫ –ø–∏—Ü—Ü—ã ‚Äì —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. "
                                                     f"–ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Å–≤–µ–∂–∏–º–∏ "
                                                     f"–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º–∏ "
                                                     f"–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–≥–æ –≤–∫—É—Å–∞."
                                                     f"–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ —É–≥–æ–¥–∏—Ç—å —Ç–≤–æ–µ–º—É –≤–∫—É—Å—É, –Ω–æ –∏ —Å–æ–∑–¥–∞—Ç—å "
                                                     f"–Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π –æ–ø—ã—Ç. –†–∞—Å—Å–ª–∞–±—å—Å—è, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π –∏ –≥–æ—Ç–æ–≤—å—Å—è"
                                                     f" –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É "
                                                     f"–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –∞—Ä–æ–º–∞—Ç–æ–≤ –∏ –≤–∫—É—Å–æ–≤.",
                                    reply_markup=markup).message_id
    db.set_last_message(message.chat.id, last_message)


@bot.callback_query_handler(func=lambda callback: True)
def callback_handler(callback):
    if callback.data == 'order':
        bot.delete_message(callback.message.chat.id, db.get_last_message(callback.message.chat.id))
        last_message = bot.send_message(callback.message.chat.id, generate_menu(),
                                        parse_mode="Markdown", reply_markup=generate_keyboard()).message_id
        db.set_last_message(callback.message.chat.id, last_message)
    if callback.data == 'review':
        bot.delete_message(callback.message.chat.id, db.get_last_message(callback.message.chat.id))
        mesg = bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤')
        db.set_last_message(callback.message.chat.id, mesg.message_id)
        bot.register_next_step_handler(mesg, review_handler)
    if callback.data in "12345678910":
        add_to_basket(callback.message.chat.id, int(callback.data) - 1)
        bot.answer_callback_query(callback_query_id=callback.id, text='–î–æ–±–∞–≤–ª–µ–Ω–æ')
    if callback.data == 'basket':
        if len(db.get_basket(callback.message.chat.id)) == 0:
            bot.answer_callback_query(callback_query_id=callback.id, text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        else:
            markup = InlineKeyboardMarkup()
            button1 = InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='payments')
            button2 = InlineKeyboardButton('–ú–µ–Ω—é', callback_data='order')
            button3 = InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear')
            markup.add(button1, button2, button3)
            bot.delete_message(callback.message.chat.id, db.get_last_message(callback.message.chat.id))
            last_message = bot.send_message(callback.message.chat.id, generate_basket(callback.message.chat.id),
                                            parse_mode="Markdown", reply_markup=markup).message_id
            db.set_last_message(callback.message.chat.id, last_message)
    if callback.data == 'back':
        start_message_handler(callback.message)
    if callback.data == 'clear':
        db.set_basket(callback.message.chat.id, str({}))
        bot.answer_callback_query(callback_query_id=callback.id, text='–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
        start_message_handler(callback.message)
    if callback.data == 'payments':
        basket = db.get_basket(callback.message.chat.id)
        price = []
        for key, value in basket.items():
            price.append(LabeledPrice(
                menu['menu'][key]['name'] + " " + str(value) + " —à—Ç.",
                menu['menu'][key]['price'] * value * 100))
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', pay=True)
        button2 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='basket')
        markup.add(button1, button2)
        bot.delete_message(callback.message.chat.id, db.get_last_message(callback.message.chat.id))
        last_message = bot.send_invoice(callback.message.chat.id, title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                                        description='–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                        provider_token=PAY_TOKEN,
                                        currency='rub',
                                        need_shipping_address=True,
                                        need_name=True,
                                        need_phone_number=True,
                                        prices=price,
                                        start_parameter='time-machine-example',
                                        invoice_payload='HAPPY FRIDAYS COUPON',
                                        reply_markup=markup).message_id
        db.set_last_message(callback.message.chat.id, last_message)


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    bot.delete_message(message.chat.id, db.get_last_message(message.chat.id))
    generate_basket(message.chat.id)
    bot.send_message(message.chat.id, generate_receipt(message.chat.id), parse_mode="Markdown").message_id
    sleep(3)
    db.set_last_message(message.chat.id, 0)
    start_message_handler(message)


@bot.message_handler()
def message_handler(message):
    bot.send_message(message.chat.id, '–Ø –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç –∏ –Ω–µ —É–º–µ—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å '
                                      '–±–µ—Å–µ–¥—É, –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')


bot.polling(none_stop=True, allowed_updates=[])
